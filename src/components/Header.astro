---
import siteConfig from '~/site.config'
import LightDarkAutoButton from '~/components/LightDarkAutoButton.astro'
import Search from '~/components/Search.astro'
import SelectTheme from '~/components/SelectTheme.astro'
import NavLink from '~/components/NavLink.astro'
import LanguageSwitcher from '~/components/LanguageSwitcher.astro'
import { localizePath, useTranslations, type Lang } from '~/i18n/config'

const lightDarkAutoTheme = siteConfig.themes.mode === 'light-dark-auto'
const selectTheme =
  siteConfig.themes.mode === 'select' && siteConfig.themes.include.length > 1

interface Props {
  lang: Lang
}

const { lang } = Astro.props
const t = useTranslations(lang)
const homeHref = localizePath('/', lang)
const localizedLinks = siteConfig.navLinks.map((link) => ({
  ...link,
  name: link.i18nKey ? t(link.i18nKey) : link.name,
  url: link.external ? link.url : localizePath(link.url, lang),
}))
---

<header class="sm:relative sticky top-0 z-50 bg-background sm:m-0 -m-1.5">
  <div class="relative flex items-center justify-between bg-accent/10 rounded-xl">
    <div class="flex items-center">
      <a
        id="logo"
        href={homeHref}
        class="block px-2 py-1 m-1.5 mr-2 max-w-full no-underline items-center bg-accent text-background font-bold rounded"
      >
        {siteConfig.title}
      </a>
      <nav aria-label="Menu" class="p-0 ml-0.5 text-accent hidden sm:block">
        <ul class="flex flex-row text-accent">
          {
            localizedLinks.map((link) => (
              <li class="mr-5" aria-expanded="true">
                <NavLink link={link} />
              </li>
            ))
          }
        </ul>
      </nav>
    </div>

    <div class="flex items-center sm:gap-3 gap-2 sm:mr-3">
      <Search
        trailingSlashes={siteConfig.trailingSlashes}
        label={t('search.open')}
        dialogLabel={t('search.dialogLabel')}
      />
      <LanguageSwitcher lang={lang} />
      {lightDarkAutoTheme && <LightDarkAutoButton />}
      {selectTheme && <SelectTheme />}
      <nav id="nav-mobile" aria-label="Menu" class="p-0 text-accent sm:hidden">
        <button
          id="nav-mobile-button"
          class="px-3 py-1 h-full cursor-pointer border-2 rounded-xl bg-background"
          type="button"
          aria-expanded="false"
          aria-controls="nav-menu-list"
        >
          â–¾
        </button>
        <ul
          id="nav-mobile-list"
          class="invisible absolute flex flex-col bg-background shadow text-accent border-2 m-0 p-2.5 top-11.5 left-auto right-0 z-50 rounded-xl"
        >
          {
            localizedLinks.map((link) => (
              <li class="p-1" aria-expanded="false">
                <NavLink link={link} />
              </li>
            ))
          }
        </ul>
      </nav>
    </div>
  </div>
</header>

<script>
  const navMobileButton = document.getElementById('nav-mobile-button')
  const navMobileList = document.getElementById('nav-mobile-list')
  const navMobileListItems = navMobileList?.querySelectorAll('li')
  const toggleNavMobileMenu = (action: 'on' | 'off' | 'toggle') => {
    let isNowOpen: boolean = false
    if (action === 'on') {
      isNowOpen = true
      navMobileList?.classList.remove('invisible')
    } else if (action === 'off') {
      isNowOpen = false
      navMobileList?.classList.add('invisible')
    } else {
      isNowOpen = !navMobileList?.classList.toggle('invisible')
    }
    navMobileButton?.setAttribute('aria-expanded', isNowOpen ? 'true' : 'false')
    navMobileListItems?.forEach((listItem) => {
      listItem.setAttribute('aria-expanded', isNowOpen ? 'true' : 'false')
    })
  }
  navMobileButton?.addEventListener('click', (_ev) => {
    toggleNavMobileMenu('toggle')
  })
</script>
